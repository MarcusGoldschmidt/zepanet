pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const EN_MAXID: c_int = 31;
pub const EN_MAXMSG: c_int = 255;
pub const EN_SizeLimits = c_uint;
pub const EN_ELEVATION: c_int = 0;
pub const EN_BASEDEMAND: c_int = 1;
pub const EN_PATTERN: c_int = 2;
pub const EN_EMITTER: c_int = 3;
pub const EN_INITQUAL: c_int = 4;
pub const EN_SOURCEQUAL: c_int = 5;
pub const EN_SOURCEPAT: c_int = 6;
pub const EN_SOURCETYPE: c_int = 7;
pub const EN_TANKLEVEL: c_int = 8;
pub const EN_DEMAND: c_int = 9;
pub const EN_HEAD: c_int = 10;
pub const EN_PRESSURE: c_int = 11;
pub const EN_QUALITY: c_int = 12;
pub const EN_SOURCEMASS: c_int = 13;
pub const EN_INITVOLUME: c_int = 14;
pub const EN_MIXMODEL: c_int = 15;
pub const EN_MIXZONEVOL: c_int = 16;
pub const EN_TANKDIAM: c_int = 17;
pub const EN_MINVOLUME: c_int = 18;
pub const EN_VOLCURVE: c_int = 19;
pub const EN_MINLEVEL: c_int = 20;
pub const EN_MAXLEVEL: c_int = 21;
pub const EN_MIXFRACTION: c_int = 22;
pub const EN_TANK_KBULK: c_int = 23;
pub const EN_TANKVOLUME: c_int = 24;
pub const EN_MAXVOLUME: c_int = 25;
pub const EN_CANOVERFLOW: c_int = 26;
pub const EN_DEMANDDEFICIT: c_int = 27;
pub const EN_NodeProperty = c_uint;
pub const EN_DIAMETER: c_int = 0;
pub const EN_LENGTH: c_int = 1;
pub const EN_ROUGHNESS: c_int = 2;
pub const EN_MINORLOSS: c_int = 3;
pub const EN_INITSTATUS: c_int = 4;
pub const EN_INITSETTING: c_int = 5;
pub const EN_KBULK: c_int = 6;
pub const EN_KWALL: c_int = 7;
pub const EN_FLOW: c_int = 8;
pub const EN_VELOCITY: c_int = 9;
pub const EN_HEADLOSS: c_int = 10;
pub const EN_STATUS: c_int = 11;
pub const EN_SETTING: c_int = 12;
pub const EN_ENERGY: c_int = 13;
pub const EN_LINKQUAL: c_int = 14;
pub const EN_LINKPATTERN: c_int = 15;
pub const EN_PUMP_STATE: c_int = 16;
pub const EN_PUMP_EFFIC: c_int = 17;
pub const EN_PUMP_POWER: c_int = 18;
pub const EN_PUMP_HCURVE: c_int = 19;
pub const EN_PUMP_ECURVE: c_int = 20;
pub const EN_PUMP_ECOST: c_int = 21;
pub const EN_PUMP_EPAT: c_int = 22;
pub const EN_LinkProperty = c_uint;
pub const EN_DURATION: c_int = 0;
pub const EN_HYDSTEP: c_int = 1;
pub const EN_QUALSTEP: c_int = 2;
pub const EN_PATTERNSTEP: c_int = 3;
pub const EN_PATTERNSTART: c_int = 4;
pub const EN_REPORTSTEP: c_int = 5;
pub const EN_REPORTSTART: c_int = 6;
pub const EN_RULESTEP: c_int = 7;
pub const EN_STATISTIC: c_int = 8;
pub const EN_PERIODS: c_int = 9;
pub const EN_STARTTIME: c_int = 10;
pub const EN_HTIME: c_int = 11;
pub const EN_QTIME: c_int = 12;
pub const EN_HALTFLAG: c_int = 13;
pub const EN_NEXTEVENT: c_int = 14;
pub const EN_NEXTEVENTTANK: c_int = 15;
pub const EN_TimeParameter = c_uint;
pub const EN_ITERATIONS: c_int = 0;
pub const EN_RELATIVEERROR: c_int = 1;
pub const EN_MAXHEADERROR: c_int = 2;
pub const EN_MAXFLOWCHANGE: c_int = 3;
pub const EN_MASSBALANCE: c_int = 4;
pub const EN_DEFICIENTNODES: c_int = 5;
pub const EN_DEMANDREDUCTION: c_int = 6;
pub const EN_AnalysisStatistic = c_uint;
pub const EN_NODE: c_int = 0;
pub const EN_LINK: c_int = 1;
pub const EN_TIMEPAT: c_int = 2;
pub const EN_CURVE: c_int = 3;
pub const EN_CONTROL: c_int = 4;
pub const EN_RULE: c_int = 5;
pub const EN_ObjectType = c_uint;
pub const EN_NODECOUNT: c_int = 0;
pub const EN_TANKCOUNT: c_int = 1;
pub const EN_LINKCOUNT: c_int = 2;
pub const EN_PATCOUNT: c_int = 3;
pub const EN_CURVECOUNT: c_int = 4;
pub const EN_CONTROLCOUNT: c_int = 5;
pub const EN_RULECOUNT: c_int = 6;
pub const EN_CountType = c_uint;
pub const EN_JUNCTION: c_int = 0;
pub const EN_RESERVOIR: c_int = 1;
pub const EN_TANK: c_int = 2;
pub const EN_NodeType = c_uint;
pub const EN_CVPIPE: c_int = 0;
pub const EN_PIPE: c_int = 1;
pub const EN_PUMP: c_int = 2;
pub const EN_PRV: c_int = 3;
pub const EN_PSV: c_int = 4;
pub const EN_PBV: c_int = 5;
pub const EN_FCV: c_int = 6;
pub const EN_TCV: c_int = 7;
pub const EN_GPV: c_int = 8;
pub const EN_LinkType = c_uint;
pub const EN_CLOSED: c_int = 0;
pub const EN_OPEN: c_int = 1;
pub const EN_LinkStatusType = c_uint;
pub const EN_PUMP_XHEAD: c_int = 0;
pub const EN_PUMP_CLOSED: c_int = 2;
pub const EN_PUMP_OPEN: c_int = 3;
pub const EN_PUMP_XFLOW: c_int = 5;
pub const EN_PumpStateType = c_uint;
pub const EN_NONE: c_int = 0;
pub const EN_CHEM: c_int = 1;
pub const EN_AGE: c_int = 2;
pub const EN_TRACE: c_int = 3;
pub const EN_QualityType = c_uint;
pub const EN_CONCEN: c_int = 0;
pub const EN_MASS: c_int = 1;
pub const EN_SETPOINT: c_int = 2;
pub const EN_FLOWPACED: c_int = 3;
pub const EN_SourceType = c_uint;
pub const EN_HW: c_int = 0;
pub const EN_DW: c_int = 1;
pub const EN_CM: c_int = 2;
pub const EN_HeadLossType = c_uint;
pub const EN_CFS: c_int = 0;
pub const EN_GPM: c_int = 1;
pub const EN_MGD: c_int = 2;
pub const EN_IMGD: c_int = 3;
pub const EN_AFD: c_int = 4;
pub const EN_LPS: c_int = 5;
pub const EN_LPM: c_int = 6;
pub const EN_MLD: c_int = 7;
pub const EN_CMH: c_int = 8;
pub const EN_CMD: c_int = 9;
pub const EN_FlowUnits = c_uint;
pub const EN_DDA: c_int = 0;
pub const EN_PDA: c_int = 1;
pub const EN_DemandModel = c_uint;
pub const EN_TRIALS: c_int = 0;
pub const EN_ACCURACY: c_int = 1;
pub const EN_TOLERANCE: c_int = 2;
pub const EN_EMITEXPON: c_int = 3;
pub const EN_DEMANDMULT: c_int = 4;
pub const EN_HEADERROR: c_int = 5;
pub const EN_FLOWCHANGE: c_int = 6;
pub const EN_HEADLOSSFORM: c_int = 7;
pub const EN_GLOBALEFFIC: c_int = 8;
pub const EN_GLOBALPRICE: c_int = 9;
pub const EN_GLOBALPATTERN: c_int = 10;
pub const EN_DEMANDCHARGE: c_int = 11;
pub const EN_SP_GRAVITY: c_int = 12;
pub const EN_SP_VISCOS: c_int = 13;
pub const EN_UNBALANCED: c_int = 14;
pub const EN_CHECKFREQ: c_int = 15;
pub const EN_MAXCHECK: c_int = 16;
pub const EN_DAMPLIMIT: c_int = 17;
pub const EN_SP_DIFFUS: c_int = 18;
pub const EN_BULKORDER: c_int = 19;
pub const EN_WALLORDER: c_int = 20;
pub const EN_TANKORDER: c_int = 21;
pub const EN_CONCENLIMIT: c_int = 22;
pub const EN_Option = c_uint;
pub const EN_LOWLEVEL: c_int = 0;
pub const EN_HILEVEL: c_int = 1;
pub const EN_TIMER: c_int = 2;
pub const EN_TIMEOFDAY: c_int = 3;
pub const EN_ControlType = c_uint;
pub const EN_SERIES: c_int = 0;
pub const EN_AVERAGE: c_int = 1;
pub const EN_MINIMUM: c_int = 2;
pub const EN_MAXIMUM: c_int = 3;
pub const EN_RANGE: c_int = 4;
pub const EN_StatisticType = c_uint;
pub const EN_MIX1: c_int = 0;
pub const EN_MIX2: c_int = 1;
pub const EN_FIFO: c_int = 2;
pub const EN_LIFO: c_int = 3;
pub const EN_MixingModel = c_uint;
pub const EN_NOSAVE: c_int = 0;
pub const EN_SAVE: c_int = 1;
pub const EN_INITFLOW: c_int = 10;
pub const EN_SAVE_AND_INIT: c_int = 11;
pub const EN_InitHydOption = c_uint;
pub const EN_CONST_HP: c_int = 0;
pub const EN_POWER_FUNC: c_int = 1;
pub const EN_CUSTOM: c_int = 2;
pub const EN_NOCURVE: c_int = 3;
pub const EN_PumpType = c_uint;
pub const EN_VOLUME_CURVE: c_int = 0;
pub const EN_PUMP_CURVE: c_int = 1;
pub const EN_EFFIC_CURVE: c_int = 2;
pub const EN_HLOSS_CURVE: c_int = 3;
pub const EN_GENERIC_CURVE: c_int = 4;
pub const EN_CurveType = c_uint;
pub const EN_UNCONDITIONAL: c_int = 0;
pub const EN_CONDITIONAL: c_int = 1;
pub const EN_ActionCodeType = c_uint;
pub const EN_NO_REPORT: c_int = 0;
pub const EN_NORMAL_REPORT: c_int = 1;
pub const EN_FULL_REPORT: c_int = 2;
pub const EN_StatusReport = c_uint;
pub const EN_R_NODE: c_int = 6;
pub const EN_R_LINK: c_int = 7;
pub const EN_R_SYSTEM: c_int = 8;
pub const EN_RuleObject = c_uint;
pub const EN_R_DEMAND: c_int = 0;
pub const EN_R_HEAD: c_int = 1;
pub const EN_R_GRADE: c_int = 2;
pub const EN_R_LEVEL: c_int = 3;
pub const EN_R_PRESSURE: c_int = 4;
pub const EN_R_FLOW: c_int = 5;
pub const EN_R_STATUS: c_int = 6;
pub const EN_R_SETTING: c_int = 7;
pub const EN_R_POWER: c_int = 8;
pub const EN_R_TIME: c_int = 9;
pub const EN_R_CLOCKTIME: c_int = 10;
pub const EN_R_FILLTIME: c_int = 11;
pub const EN_R_DRAINTIME: c_int = 12;
pub const EN_RuleVariable = c_uint;
pub const EN_R_EQ: c_int = 0;
pub const EN_R_NE: c_int = 1;
pub const EN_R_LE: c_int = 2;
pub const EN_R_GE: c_int = 3;
pub const EN_R_LT: c_int = 4;
pub const EN_R_GT: c_int = 5;
pub const EN_R_IS: c_int = 6;
pub const EN_R_NOT: c_int = 7;
pub const EN_R_BELOW: c_int = 8;
pub const EN_R_ABOVE: c_int = 9;
pub const EN_RuleOperator = c_uint;
pub const EN_R_IS_OPEN: c_int = 1;
pub const EN_R_IS_CLOSED: c_int = 2;
pub const EN_R_IS_ACTIVE: c_int = 3;
pub const EN_RuleStatus = c_uint;
pub const struct_Project = opaque {};
pub const EN_Project = ?*struct_Project;
pub extern fn EN_createproject(ph: [*c]EN_Project) c_int;
pub extern fn EN_deleteproject(ph: EN_Project) c_int;
pub extern fn EN_runproject(ph: EN_Project, inpFile: [*c]const u8, rptFile: [*c]const u8, outFile: [*c]const u8, pviewprog: ?*const fn ([*c]u8) callconv(.c) void) c_int;
pub extern fn EN_init(ph: EN_Project, rptFile: [*c]const u8, outFile: [*c]const u8, unitsType: c_int, headLossType: c_int) c_int;
pub extern fn EN_open(ph: EN_Project, inpFile: [*c]const u8, rptFile: [*c]const u8, outFile: [*c]const u8) c_int;
pub extern fn EN_gettitle(ph: EN_Project, out_line1: [*c]u8, out_line2: [*c]u8, out_line3: [*c]u8) c_int;
pub extern fn EN_settitle(ph: EN_Project, line1: [*c]u8, line2: [*c]u8, line3: [*c]u8) c_int;
pub extern fn EN_getcomment(ph: EN_Project, object: c_int, index: c_int, out_comment: [*c]u8) c_int;
pub extern fn EN_setcomment(ph: EN_Project, object: c_int, index: c_int, comment: [*c]u8) c_int;
pub extern fn EN_getcount(ph: EN_Project, object: c_int, count: [*c]c_int) c_int;
pub extern fn EN_saveinpfile(ph: EN_Project, filename: [*c]const u8) c_int;
pub extern fn EN_close(ph: EN_Project) c_int;
pub extern fn EN_solveH(ph: EN_Project) c_int;
pub extern fn EN_usehydfile(ph: EN_Project, filename: [*c]const u8) c_int;
pub extern fn EN_openH(ph: EN_Project) c_int;
pub extern fn EN_initH(ph: EN_Project, initFlag: c_int) c_int;
pub extern fn EN_runH(ph: EN_Project, currentTime: [*c]c_long) c_int;
pub extern fn EN_nextH(ph: EN_Project, tStep: [*c]c_long) c_int;
pub extern fn EN_saveH(ph: EN_Project) c_int;
pub extern fn EN_savehydfile(ph: EN_Project, filename: [*c]const u8) c_int;
pub extern fn EN_closeH(ph: EN_Project) c_int;
pub extern fn EN_solveQ(ph: EN_Project) c_int;
pub extern fn EN_openQ(ph: EN_Project) c_int;
pub extern fn EN_initQ(ph: EN_Project, saveFlag: c_int) c_int;
pub extern fn EN_runQ(ph: EN_Project, currentTime: [*c]c_long) c_int;
pub extern fn EN_nextQ(ph: EN_Project, tStep: [*c]c_long) c_int;
pub extern fn EN_stepQ(ph: EN_Project, timeLeft: [*c]c_long) c_int;
pub extern fn EN_closeQ(ph: EN_Project) c_int;
pub extern fn EN_writeline(ph: EN_Project, line: [*c]u8) c_int;
pub extern fn EN_report(ph: EN_Project) c_int;
pub extern fn EN_copyreport(ph: EN_Project, filename: [*c]u8) c_int;
pub extern fn EN_clearreport(ph: EN_Project) c_int;
pub extern fn EN_resetreport(ph: EN_Project) c_int;
pub extern fn EN_setreport(ph: EN_Project, format: [*c]u8) c_int;
pub extern fn EN_setstatusreport(ph: EN_Project, level: c_int) c_int;
pub extern fn EN_getversion(version: [*c]c_int) c_int;
pub extern fn EN_geterror(errcode: c_int, out_errmsg: [*c]u8, maxLen: c_int) c_int;
pub extern fn EN_getstatistic(ph: EN_Project, @"type": c_int, value: [*c]f64) c_int;
pub extern fn EN_getresultindex(ph: EN_Project, @"type": c_int, index: c_int, value: [*c]c_int) c_int;
pub extern fn EN_getoption(ph: EN_Project, option: c_int, value: [*c]f64) c_int;
pub extern fn EN_setoption(ph: EN_Project, option: c_int, value: f64) c_int;
pub extern fn EN_getflowunits(ph: EN_Project, units: [*c]c_int) c_int;
pub extern fn EN_setflowunits(ph: EN_Project, units: c_int) c_int;
pub extern fn EN_gettimeparam(ph: EN_Project, param: c_int, value: [*c]c_long) c_int;
pub extern fn EN_settimeparam(ph: EN_Project, param: c_int, value: c_long) c_int;
pub extern fn EN_getqualinfo(ph: EN_Project, qualType: [*c]c_int, out_chemName: [*c]u8, out_chemUnits: [*c]u8, traceNode: [*c]c_int) c_int;
pub extern fn EN_getqualtype(ph: EN_Project, qualType: [*c]c_int, traceNode: [*c]c_int) c_int;
pub extern fn EN_setqualtype(ph: EN_Project, qualType: c_int, chemName: [*c]u8, chemUnits: [*c]u8, traceNode: [*c]u8) c_int;
pub extern fn EN_addnode(ph: EN_Project, id: [*c]u8, nodeType: c_int, index: [*c]c_int) c_int;
pub extern fn EN_deletenode(ph: EN_Project, index: c_int, actionCode: c_int) c_int;
pub extern fn EN_getnodeindex(ph: EN_Project, id: [*c]u8, index: [*c]c_int) c_int;
pub extern fn EN_getnodeid(ph: EN_Project, index: c_int, out_id: [*c]u8) c_int;
pub extern fn EN_setnodeid(ph: EN_Project, index: c_int, newid: [*c]u8) c_int;
pub extern fn EN_getnodetype(ph: EN_Project, index: c_int, nodeType: [*c]c_int) c_int;
pub extern fn EN_getnodevalue(ph: EN_Project, index: c_int, property: c_int, value: [*c]f64) c_int;
pub extern fn EN_setnodevalue(ph: EN_Project, index: c_int, property: c_int, value: f64) c_int;
pub extern fn EN_setjuncdata(ph: EN_Project, index: c_int, elev: f64, dmnd: f64, dmndpat: [*c]u8) c_int;
pub extern fn EN_settankdata(ph: EN_Project, index: c_int, elev: f64, initlvl: f64, minlvl: f64, maxlvl: f64, diam: f64, minvol: f64, volcurve: [*c]u8) c_int;
pub extern fn EN_getcoord(ph: EN_Project, index: c_int, x: [*c]f64, y: [*c]f64) c_int;
pub extern fn EN_setcoord(ph: EN_Project, index: c_int, x: f64, y: f64) c_int;
pub extern fn EN_getdemandmodel(ph: EN_Project, @"type": [*c]c_int, pmin: [*c]f64, preq: [*c]f64, pexp: [*c]f64) c_int;
pub extern fn EN_setdemandmodel(ph: EN_Project, @"type": c_int, pmin: f64, preq: f64, pexp: f64) c_int;
pub extern fn EN_adddemand(ph: EN_Project, nodeIndex: c_int, baseDemand: f64, demandPattern: [*c]u8, demandName: [*c]u8) c_int;
pub extern fn EN_deletedemand(ph: EN_Project, nodeIndex: c_int, demandIndex: c_int) c_int;
pub extern fn EN_getdemandindex(ph: EN_Project, nodeIndex: c_int, demandName: [*c]u8, demandIndex: [*c]c_int) c_int;
pub extern fn EN_getnumdemands(ph: EN_Project, nodeIndex: c_int, numDemands: [*c]c_int) c_int;
pub extern fn EN_getbasedemand(ph: EN_Project, nodeIndex: c_int, demandIndex: c_int, baseDemand: [*c]f64) c_int;
pub extern fn EN_setbasedemand(ph: EN_Project, nodeIndex: c_int, demandIndex: c_int, baseDemand: f64) c_int;
pub extern fn EN_getdemandpattern(ph: EN_Project, nodeIndex: c_int, demandIndex: c_int, patIndex: [*c]c_int) c_int;
pub extern fn EN_setdemandpattern(ph: EN_Project, nodeIndex: c_int, demandIndex: c_int, patIndex: c_int) c_int;
pub extern fn EN_getdemandname(ph: EN_Project, nodeIndex: c_int, demandIndex: c_int, out_demandName: [*c]u8) c_int;
pub extern fn EN_setdemandname(ph: EN_Project, nodeIndex: c_int, demandIdx: c_int, demandName: [*c]u8) c_int;
pub extern fn EN_addlink(ph: EN_Project, id: [*c]u8, linkType: c_int, fromNode: [*c]u8, toNode: [*c]u8, index: [*c]c_int) c_int;
pub extern fn EN_deletelink(ph: EN_Project, index: c_int, actionCode: c_int) c_int;
pub extern fn EN_getlinkindex(ph: EN_Project, id: [*c]u8, index: [*c]c_int) c_int;
pub extern fn EN_getlinkid(ph: EN_Project, index: c_int, out_id: [*c]u8) c_int;
pub extern fn EN_setlinkid(ph: EN_Project, index: c_int, newid: [*c]u8) c_int;
pub extern fn EN_getlinktype(ph: EN_Project, index: c_int, linkType: [*c]c_int) c_int;
pub extern fn EN_setlinktype(ph: EN_Project, inout_index: [*c]c_int, linkType: c_int, actionCode: c_int) c_int;
pub extern fn EN_getlinknodes(ph: EN_Project, index: c_int, node1: [*c]c_int, node2: [*c]c_int) c_int;
pub extern fn EN_setlinknodes(ph: EN_Project, index: c_int, node1: c_int, node2: c_int) c_int;
pub extern fn EN_getlinkvalue(ph: EN_Project, index: c_int, property: c_int, value: [*c]f64) c_int;
pub extern fn EN_setlinkvalue(ph: EN_Project, index: c_int, property: c_int, value: f64) c_int;
pub extern fn EN_setpipedata(ph: EN_Project, index: c_int, length: f64, diam: f64, rough: f64, mloss: f64) c_int;
pub extern fn EN_getvertexcount(ph: EN_Project, index: c_int, count: [*c]c_int) c_int;
pub extern fn EN_getvertex(ph: EN_Project, index: c_int, vertex: c_int, x: [*c]f64, y: [*c]f64) c_int;
pub extern fn EN_setvertices(ph: EN_Project, index: c_int, x: [*c]f64, y: [*c]f64, count: c_int) c_int;
pub extern fn EN_getpumptype(ph: EN_Project, linkIndex: c_int, pumpType: [*c]c_int) c_int;
pub extern fn EN_getheadcurveindex(ph: EN_Project, linkIndex: c_int, curveIndex: [*c]c_int) c_int;
pub extern fn EN_setheadcurveindex(ph: EN_Project, linkIndex: c_int, curveIndex: c_int) c_int;
pub extern fn EN_addpattern(ph: EN_Project, id: [*c]u8) c_int;
pub extern fn EN_deletepattern(ph: EN_Project, index: c_int) c_int;
pub extern fn EN_getpatternindex(ph: EN_Project, id: [*c]u8, index: [*c]c_int) c_int;
pub extern fn EN_getpatternid(ph: EN_Project, index: c_int, out_id: [*c]u8) c_int;
pub extern fn EN_setpatternid(ph: EN_Project, index: c_int, id: [*c]u8) c_int;
pub extern fn EN_getpatternlen(ph: EN_Project, index: c_int, len: [*c]c_int) c_int;
pub extern fn EN_getpatternvalue(ph: EN_Project, index: c_int, period: c_int, value: [*c]f64) c_int;
pub extern fn EN_setpatternvalue(ph: EN_Project, index: c_int, period: c_int, value: f64) c_int;
pub extern fn EN_getaveragepatternvalue(ph: EN_Project, index: c_int, value: [*c]f64) c_int;
pub extern fn EN_setpattern(ph: EN_Project, index: c_int, values: [*c]f64, len: c_int) c_int;
pub extern fn EN_addcurve(ph: EN_Project, id: [*c]u8) c_int;
pub extern fn EN_deletecurve(ph: EN_Project, index: c_int) c_int;
pub extern fn EN_getcurveindex(ph: EN_Project, id: [*c]u8, index: [*c]c_int) c_int;
pub extern fn EN_getcurveid(ph: EN_Project, index: c_int, out_id: [*c]u8) c_int;
pub extern fn EN_setcurveid(ph: EN_Project, index: c_int, id: [*c]u8) c_int;
pub extern fn EN_getcurvelen(ph: EN_Project, index: c_int, len: [*c]c_int) c_int;
pub extern fn EN_getcurvetype(ph: EN_Project, index: c_int, @"type": [*c]c_int) c_int;
pub extern fn EN_getcurvevalue(ph: EN_Project, curveIndex: c_int, pointIndex: c_int, x: [*c]f64, y: [*c]f64) c_int;
pub extern fn EN_setcurvevalue(ph: EN_Project, curveIndex: c_int, pointIndex: c_int, x: f64, y: f64) c_int;
pub extern fn EN_getcurve(ph: EN_Project, index: c_int, out_id: [*c]u8, nPoints: [*c]c_int, xValues: [*c]f64, yValues: [*c]f64) c_int;
pub extern fn EN_setcurve(ph: EN_Project, index: c_int, xValues: [*c]f64, yValues: [*c]f64, nPoints: c_int) c_int;
pub extern fn EN_addcontrol(ph: EN_Project, @"type": c_int, linkIndex: c_int, setting: f64, nodeIndex: c_int, level: f64, index: [*c]c_int) c_int;
pub extern fn EN_deletecontrol(ph: EN_Project, index: c_int) c_int;
pub extern fn EN_getcontrol(ph: EN_Project, index: c_int, @"type": [*c]c_int, linkIndex: [*c]c_int, setting: [*c]f64, nodeIndex: [*c]c_int, level: [*c]f64) c_int;
pub extern fn EN_setcontrol(ph: EN_Project, index: c_int, @"type": c_int, linkIndex: c_int, setting: f64, nodeIndex: c_int, level: f64) c_int;
pub extern fn EN_addrule(ph: EN_Project, rule: [*c]u8) c_int;
pub extern fn EN_deleterule(ph: EN_Project, index: c_int) c_int;
pub extern fn EN_getrule(ph: EN_Project, index: c_int, nPremises: [*c]c_int, nThenActions: [*c]c_int, nElseActions: [*c]c_int, priority: [*c]f64) c_int;
pub extern fn EN_getruleID(ph: EN_Project, index: c_int, out_id: [*c]u8) c_int;
pub extern fn EN_getpremise(ph: EN_Project, ruleIndex: c_int, premiseIndex: c_int, logop: [*c]c_int, object: [*c]c_int, objIndex: [*c]c_int, variable: [*c]c_int, relop: [*c]c_int, status: [*c]c_int, value: [*c]f64) c_int;
pub extern fn EN_setpremise(ph: EN_Project, ruleIndex: c_int, premiseIndex: c_int, logop: c_int, object: c_int, objIndex: c_int, variable: c_int, relop: c_int, status: c_int, value: f64) c_int;
pub extern fn EN_setpremiseindex(ph: EN_Project, ruleIndex: c_int, premiseIndex: c_int, objIndex: c_int) c_int;
pub extern fn EN_setpremisestatus(ph: EN_Project, ruleIndex: c_int, premiseIndex: c_int, status: c_int) c_int;
pub extern fn EN_setpremisevalue(ph: EN_Project, ruleIndex: c_int, premiseIndex: c_int, value: f64) c_int;
pub extern fn EN_getthenaction(ph: EN_Project, ruleIndex: c_int, actionIndex: c_int, linkIndex: [*c]c_int, status: [*c]c_int, setting: [*c]f64) c_int;
pub extern fn EN_setthenaction(ph: EN_Project, ruleIndex: c_int, actionIndex: c_int, linkIndex: c_int, status: c_int, setting: f64) c_int;
pub extern fn EN_getelseaction(ph: EN_Project, ruleIndex: c_int, actionIndex: c_int, linkIndex: [*c]c_int, status: [*c]c_int, setting: [*c]f64) c_int;
pub extern fn EN_setelseaction(ph: EN_Project, ruleIndex: c_int, actionIndex: c_int, linkIndex: c_int, status: c_int, setting: f64) c_int;
pub extern fn EN_setrulepriority(ph: EN_Project, index: c_int, priority: f64) c_int;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 20);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 8);
pub const __clang_version__ = "20.1.8 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Homebrew Clang 20.1.8";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 1);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __block = @compileError("unable to translate macro: undefined identifier `__blocks__`");
// (no file):42:9
pub const __BLOCKS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 1);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):97:9
pub const __INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):104:9
pub const __UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub inline fn __INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub inline fn __INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub inline fn __INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`");
// (no file):208:9
pub const __INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub inline fn __UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub inline fn __UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):233:9
pub const __UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`");
// (no file):242:9
pub const __UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __USER_LABEL_PREFIX__ = @compileError("unable to translate macro: undefined identifier `_`");
// (no file):334:9
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`");
// (no file):369:9
pub const __null_unspecified = @compileError("unable to translate macro: undefined identifier `_Null_unspecified`");
// (no file):370:9
pub const __nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`");
// (no file):371:9
pub const TARGET_OS_WIN32 = @as(c_int, 0);
pub const TARGET_OS_WINDOWS = @as(c_int, 0);
pub const TARGET_OS_LINUX = @as(c_int, 0);
pub const TARGET_OS_UNIX = @as(c_int, 0);
pub const TARGET_OS_MAC = @as(c_int, 1);
pub const TARGET_OS_OSX = @as(c_int, 1);
pub const TARGET_OS_IPHONE = @as(c_int, 0);
pub const TARGET_OS_IOS = @as(c_int, 0);
pub const TARGET_OS_TV = @as(c_int, 0);
pub const TARGET_OS_WATCH = @as(c_int, 0);
pub const TARGET_OS_VISION = @as(c_int, 0);
pub const TARGET_OS_DRIVERKIT = @as(c_int, 0);
pub const TARGET_OS_MACCATALYST = @as(c_int, 0);
pub const TARGET_OS_SIMULATOR = @as(c_int, 0);
pub const TARGET_OS_EMBEDDED = @as(c_int, 0);
pub const TARGET_OS_NANO = @as(c_int, 0);
pub const TARGET_IPHONE_SIMULATOR = @as(c_int, 0);
pub const TARGET_OS_UIKITFORMAC = @as(c_int, 0);
pub const __AARCH64EL__ = @as(c_int, 1);
pub const __aarch64__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __AARCH64_CMODEL_SMALL__ = @as(c_int, 1);
pub inline fn __ARM_ACLE_VERSION(year: anytype, quarter: anytype, patch: anytype) @TypeOf(((@as(c_int, 100) * year) + (@as(c_int, 10) * quarter)) + patch) {
    _ = &year;
    _ = &quarter;
    _ = &patch;
    return ((@as(c_int, 100) * year) + (@as(c_int, 10) * quarter)) + patch;
}
pub const __ARM_ACLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 202420, .decimal);
pub const __FUNCTION_MULTI_VERSIONING_SUPPORT_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 202430, .decimal);
pub const __ARM_ARCH = @as(c_int, 8);
pub const __ARM_ARCH_PROFILE = 'A';
pub const __ARM_64BIT_STATE = @as(c_int, 1);
pub const __ARM_PCS_AAPCS64 = @as(c_int, 1);
pub const __ARM_ARCH_ISA_A64 = @as(c_int, 1);
pub const __ARM_FEATURE_CLZ = @as(c_int, 1);
pub const __ARM_FEATURE_FMA = @as(c_int, 1);
pub const __ARM_FEATURE_LDREX = @as(c_int, 0xF);
pub const __ARM_FEATURE_IDIV = @as(c_int, 1);
pub const __ARM_FEATURE_DIV = @as(c_int, 1);
pub const __ARM_FEATURE_NUMERIC_MAXMIN = @as(c_int, 1);
pub const __ARM_FEATURE_DIRECTED_ROUNDING = @as(c_int, 1);
pub const __ARM_ALIGN_MAX_STACK_PWR = @as(c_int, 4);
pub const __ARM_STATE_ZA = @as(c_int, 1);
pub const __ARM_STATE_ZT0 = @as(c_int, 1);
pub const __ARM_FP = @as(c_int, 0xE);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_NEON_SVE_BRIDGE = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_NEON = @as(c_int, 1);
pub const __ARM_NEON_FP = @as(c_int, 0xE);
pub const __ARM_FEATURE_CRC32 = @as(c_int, 1);
pub const __ARM_FEATURE_RCPC = @as(c_int, 1);
pub const __ARM_FEATURE_CRYPTO = @as(c_int, 1);
pub const __ARM_FEATURE_AES = @as(c_int, 1);
pub const __ARM_FEATURE_SHA2 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA3 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA512 = @as(c_int, 1);
pub const __ARM_FEATURE_PAUTH = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_VECTOR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_SCALAR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_DOTPROD = @as(c_int, 1);
pub const __ARM_FEATURE_ATOMICS = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_FML = @as(c_int, 1);
pub const __ARM_FEATURE_COMPLEX = @as(c_int, 1);
pub const __ARM_FEATURE_JCVT = @as(c_int, 1);
pub const __ARM_FEATURE_QRDMX = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __FP_FAST_FMA = @as(c_int, 1);
pub const __FP_FAST_FMAF = @as(c_int, 1);
pub const __AARCH64_SIMD__ = @as(c_int, 1);
pub const __ARM64_ARCH_8__ = @as(c_int, 1);
pub const __ARM_NEON__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __arm64 = @as(c_int, 1);
pub const __arm64__ = @as(c_int, 1);
pub const __APPLE_CC__ = @as(c_int, 6000);
pub const __APPLE__ = @as(c_int, 1);
pub const __weak = @compileError("unable to translate macro: undefined identifier `objc_gc`");
// (no file):452:9
pub const __strong = "";
pub const __unsafe_unretained = "";
pub const __DYNAMIC__ = @as(c_int, 1);
pub const __MACH__ = @as(c_int, 1);
pub const __STDC_NO_THREADS__ = @as(c_int, 1);
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140601, .decimal);
pub const __ENVIRONMENT_OS_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140601, .decimal);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const EPANET2_2_H = "";
pub const DLLEXPORT = "";
pub const EPANET2_ENUMS_H = "";
pub const EN_MISSING = -@as(f64, 1.E10);
pub const Project = struct_Project;
